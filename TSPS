#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <math.h>
#include <float.h>


float distance(int *coords, int city1, int city2, int n) {
    int x1 = coords[city1*2];
    int y1 = coords[city1*2+1];
    int x2 = coords[city2*2];
    int y2 = coords[city2*2+1];

    return sqrt(pow(x1-x2, 2) + pow(y1-y2, 2));
}


void tsp(int *coords, int n, float *min_distance, int *min_path) {
 
    float dist[n][1 << n];
    int path[n][1 << n];

   
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < (1 << n); j++) {
            dist[i][j] = FLT_MAX;
            path[i][j] = -1;
        }
        dist[i][1 << i] = 0.0;
    }

  
    for (int j = 1; j < (1 << n); j++) {
        for (int i = 0; i < n; i++) {
            if ((j & (1 << i)) != 0) {
                for (int k = 0; k < n; k++) {
                    if (k != i && (j & (1 << k)) != 0) {
                        float d = dist[k][j^(1<<i)] + distance(coords, k, i, n);
                        if (d < dist[i][j]) {
                            dist[i][j] = d;
                            path[i][j] = k;
                        }
                    }
                }
            }
        }
    }


    int prev = 0;
    int cur = (1 << n) - 1;
    *min_distance = dist[0][(1 << n) - 1];
    for (int i = n-1; i > 0; i--) {
        min_path[i] = prev;
        prev = path[prev][cur];
        cur ^= 1 << min_path[i];
    }
    min_path[0] = prev;
}

int main() {
    int n;
    printf("Enter the number of cities: ");
    scanf("%d", &n);

    int coords[n*2];
    for (int i = 0; i < n; i++) {
        printf("Enter the x and y coordinates of city %d: ", i+1);
        scanf("%d %d", &coords[i*2], &coords[i*2+1]);
    }

    int min_path[n];
    float min_distance;
    tsp(coords, n, &min_distance, min_path);

    printf("Optimal path: ");
    for (int i = 0; i < n-1; i++) {
        printf("%d -> ", min_path[i]+1);
    }
    printf("%d\n", min_path[n-1]+1);
    printf("Optimal distance: %f\n", min_distance);

    return 0;
}
